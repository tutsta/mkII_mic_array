
-------------------------------------------------------------------------------
-- Copyright 2016.
-- All Rights Reserved.
--  
--
--   File Name:      host_spi.vgen
--   Type:           VGEN
--   Designer:       J. Tuthill
--   Created:        Sun Mar 20 17:39:40 2016
--   Template Rev:   2.0
--
--   Title:          Vector generator for host SPI interface module.
--   Description: 
--   
--   
--   
-------------------------------------------------------------------------------


library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

-------------------------------------------------------------------------------
entity host_spi_vgen is
   port (
      clk         : buffer std_logic;
      reset_dly   : buffer std_logic;
      cs_l_dly    : buffer std_logic;
      sclk_dly    : buffer std_logic;
      sdi_dly     : buffer std_logic;
      sdo         : in     std_logic;
      hst_dv      : in     std_logic;
      hst_ack_dly : buffer std_logic;
      cmd         : in     std_logic_vector(2 downto 0);
      addr        : in     std_logic_vector(2 downto 0);
      hst_din_dly : buffer std_logic_vector(31 downto 0);
      hst_dout    : in     std_logic_vector(31 downto 0)
      );
end host_spi_vgen;

-------------------------------------------------------------------------------
architecture vgen of host_spi_vgen is

   ---------------------------------------------------------------------------
   --                 CONSTANT, TYPE AND GENERIC DEFINITIONS                --
   ---------------------------------------------------------------------------
   ---------------------------------------------------------------------------
   --  The INP_DELAY constants correspond to tester timing groups. Edit to
   --  change INP_DELAY values from the examples below. Delete the unused
   --  INP_DELAY constants.
   ---------------------------------------------------------------------------

   constant inp_delay : time := 3.0 ns;

   constant main_clock_half_period   : time := 10 ns;
   constant serial_clock_half_period : time := 105 ns;

   constant cmd_len_c  : integer := 3;
   constant addr_len_c : integer := 3;
   constant data_len_c : integer := 32;

   ---------------------------------------------------------------------------
   --                          SIGNAL DECLARATIONS                          --
   ---------------------------------------------------------------------------
   signal reset          : std_logic;
   signal ser_clk        : std_logic;
   signal sclk           : std_logic := '1';
   signal cs_l           : std_logic := '1';
   signal sdi            : std_logic := '0';
   signal hst_ack_int    : std_logic := '0';
   signal hst_ack_int_d1 : std_logic := '0';
   signal hst_ack_int_d2 : std_logic := '0';
   signal hst_ack        : std_logic;
   signal hst_din        : std_logic_vector(31 downto 0);

   signal zero_data : std_logic_vector(data_len_c-1 downto 0) := (others => '0');


   ---------------------------------------------------------------------------
   --                        COMPONENT DECLARATIONS                         --
   ---------------------------------------------------------------------------


begin
   ---------------------------------------------------------------------------
   --                    INSTANTIATE COMPONENTS                             --
   ---------------------------------------------------------------------------

   ---------------------------------------------------------------------------
   --                    CONCURRENT SIGNAL ASSIGNMENTS                      --
   ---------------------------------------------------------------------------
   ---------------------------------------------------------------------------
   --  Use the timing groups above to assign DUT input delays with respect to
   --  the clock. Use these to test for Setup/Hold timing violations.
   ---------------------------------------------------------------------------

   hst_ack <= hst_ack_int_d2;

   reset_dly   <= reset   after inp_delay;
   cs_l_dly    <= cs_l    after inp_delay;
   sclk_dly    <= sclk    after inp_delay;
   sdi_dly     <= sdi     after inp_delay;
   hst_ack_dly <= hst_ack after inp_delay;
   hst_din_dly <= hst_din after inp_delay;


   ---------------------------------------------------------------------------
   --                         CONCURRENT PROCESSES                          --
   ---------------------------------------------------------------------------


   ---------------------------------------------------------------------------
   --  Process:       MAIN_CLOCK_GEN 
   --  Timing Domain: MAIN
   --  Purpose:       Generates Clock Waveform.
   --  Outputs:       CLK 
   --  (The following is used by av-testbench for signals in the vpat file.)
   --  Signals in this time domain:
   --       sdo
   --       hst_dv
   --       cmd
   --       addr
   --       hst_dout
   ---------------------------------------------------------------------------
   main_clock_gen : process
   begin
      clk <= '0';
      --  Wait for the initial start up time. 
      --  (You can edit the times below; Constants maybe used.)
      wait for main_clock_half_period;

      endless : loop
         clk <= '1';
         wait for main_clock_half_period;
         clk <= '0';
         wait for main_clock_half_period;
      end loop;

   end process main_clock_gen;


   ---------------------------------------------------------------------------
   --  Process:       SERIAL_CLOCK_GEN 
   --  Timing Domain: SERIAL CLOCK
   --  Purpose:       Generates Serial Clock Waveform.
   --  Outputs:       SRE_CLK 
   ---------------------------------------------------------------------------
   serial_clock_gen : process
   begin
      ser_clk <= '0';
      wait for serial_clock_half_period;

      endless : loop
         ser_clk <= '1';
         wait for serial_clock_half_period;
         ser_clk <= '0';
         wait for serial_clock_half_period;
      end loop;

   end process serial_clock_gen;

   ---------------------------------------------------------------------------
   --  Process:       HOST_ACKNOWLEDGE
   --  Timing Domain: MAIN
   --  Purpose:       
   --  Outputs:       
   ---------------------------------------------------------------------------
   hst_ack_proc : process(clk)
   begin
      if rising_edge(clk) then
         if (hst_dv = '1') then
            hst_ack_int <= '1';
         else
            hst_ack_int <= '0';
         end if;
         hst_ack_int_d1 <= hst_ack_int;
         hst_ack_int_d2 <= hst_ack_int_d1;
      end if;
   end process hst_ack_proc;

   ---------------------------------------------------------------------------
   --  Process:  DRIVER
   --  Purpose:  To drive the output signals of the vector generator.
   --  Inputs:   Feedback from the DUT.
   --  Outputs:  Inputs to DUT.
   ---------------------------------------------------------------------------


   driver : process

      procedure spi_write(cmd  : std_logic_vector(cmd_len_c-1 downto 0);
                          addr : std_logic_vector(addr_len_c-1 downto 0);
                          data : std_logic_vector(data_len_c-1 downto 0)) is
      begin
         wait until (ser_clk'event and ser_clk = '1');
         cs_l <= '1';
         sclk <= '1';
         wait until (ser_clk'event and ser_clk = '1');
         cs_l <= '0';
         sdi  <= '0';                   -- set first bit to zero for a write
         wait until (ser_clk'event and ser_clk = '1');
         sclk <= '0';
         -- send command
         cmd_loop : for i in 0 to (cmd_len_c-1) loop
            wait until (ser_clk'event and ser_clk = '1');
            sclk <= '1';
            sdi  <= cmd((cmd_len_c-1)-i);
            wait until (ser_clk'event and ser_clk = '1');
            sclk <= '0';
         end loop cmd_loop;
         -- send address
         addr_loop : for i in 0 to (addr_len_c-1) loop
            wait until (ser_clk'event and ser_clk = '1');
            sclk <= '1';
            sdi  <= addr((addr_len_c-1)-i);
            wait until (ser_clk'event and ser_clk = '1');
            sclk <= '0';
         end loop addr_loop;
         -- wait two serial data clocks before sending the data
         wait until (ser_clk'event and ser_clk = '1');
         wait until (ser_clk'event and ser_clk = '1');
         wait until (ser_clk'event and ser_clk = '1');
         wait until (ser_clk'event and ser_clk = '1');
         -- transmit the data
         data_loop : for i in 0 to (data_len_c-1) loop
            wait until (ser_clk'event and ser_clk = '1');
            sclk <= '1';
            sdi  <= data((data_len_c-1)-i);
            wait until (ser_clk'event and ser_clk = '1');
            sclk <= '0';
         end loop data_loop;
         wait until (ser_clk'event and ser_clk = '1');
         sclk <= '1';
         wait until (ser_clk'event and ser_clk = '1');
         cs_l <= '1';
      end;

   procedure spi_read
      (cmd  : std_logic_vector(cmd_len_c-1 downto 0);
       addr : std_logic_vector(addr_len_c-1 downto 0)) is
   begin
      wait until (ser_clk'event and ser_clk = '1');
      cs_l <= '1';
      sclk <= '1';
      wait until (ser_clk'event and ser_clk = '1');
      cs_l <= '0';
      sdi  <= '1';                      -- set first bit to one for a read
      wait until (ser_clk'event and ser_clk = '1');
      sclk <= '0';
      -- send command
      cmd_loop : for i in 0 to (cmd_len_c-1) loop
         wait until (ser_clk'event and ser_clk = '1');
         sclk <= '1';
         sdi  <= cmd((cmd_len_c-1)-i);
         wait until (ser_clk'event and ser_clk = '1');
         sclk <= '0';
      end loop cmd_loop;
      -- send address
      addr_loop : for i in 0 to (addr_len_c-1) loop
         wait until (ser_clk'event and ser_clk = '1');
         sclk <= '1';
         sdi  <= addr((addr_len_c-1)-i);
         wait until (ser_clk'event and ser_clk = '1');
         sclk <= '0';
      end loop addr_loop;
      -- wait two serial data clocks before sending the data
      wait until (ser_clk'event and ser_clk = '1');
      wait until (ser_clk'event and ser_clk = '1');
      wait until (ser_clk'event and ser_clk = '1');
      wait until (ser_clk'event and ser_clk = '1');
      -- transmit the data
      data_loop : for i in 0 to (data_len_c-1) loop
         wait until (ser_clk'event and ser_clk = '1');
         sclk <= '1';
         sdi  <= zero_data((data_len_c-1)-i);
         wait until (ser_clk'event and ser_clk = '1');
         sclk <= '0';
      end loop data_loop;
      wait until (ser_clk'event and ser_clk = '1');
      sclk <= '1';
      wait until (ser_clk'event and ser_clk = '1');
      cs_l <= '1';
   end;

   begin
      -----------------------------------------------------------------------
      --  Put your test vectors here!
      -----------------------------------------------------------------------
      wait until (clk'event and clk = '1');
      reset   <= '1';
--      hst_din <= "00000000000000000000000000000000";
      hst_din <= x"A5A5E2E2";

      for i in 0 to 9 loop
         wait until (clk'event and clk = '1');
      end loop;
      reset <= '0';

      for i in 0 to 100 loop
         wait until (clk'event and clk = '1');
      end loop;

      spi_write("101", "001", x"A5A5E2E2");
--      spi_write("101", "001", x"00000001");

      for i in 0 to 100 loop
         wait until (clk'event and clk = '1');
      end loop;

      spi_read("101", "001");

      endless : loop
         wait until (clk'event and clk = '1');
      end loop;


   end process driver;

end vgen;

-------------------------------------------------------------------------------

