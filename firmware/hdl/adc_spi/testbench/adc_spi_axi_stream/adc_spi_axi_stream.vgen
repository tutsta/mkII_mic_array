
-------------------------------------------------------------------------------
-- Copyright 2020.
-- All Rights Reserved.
--  
--
--   File Name:      adc_spi_axi_stream.vgen
--   Type:           VGEN
--   Designer:       J. Tuthill
--   Created:        Sat Jan 11 11:56:05 2020
--   Template Rev:   2.0
--
--   Title:          Vector generator for the ADC SPI to AXI-Stream interface.
--   Description: 
--   
--   
--   
--
--   
--   
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
--  The following line is used by the testbench generator and the
--  av-simulate function. 
--  NOTE: The time can be changed from ns to; ps,ns,us,ms.
--              TOTAL SIMULATION TIME (ns): 100 
--                 generate_simulus_files = true
--                 generate_capture_files = true
--                   dont_touch_tben_file = false
--                    dont_touch_cmd_file = false
--  TRACE SIGNALS
--  /ADC_SPI_AXI_STREAM_TBEN/DUT/*
--
-------------------------------------------------------------------------------


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


-- Add user defined use clauses under here



-------------------------------------------------------------------------------
entity adc_spi_axi_stream_vgen is
   port (
      clk                  : buffer std_logic;
      reset_dly            : buffer std_logic;
      m00_axis_aresetn_dly : buffer std_logic;
      stream_go_dly        : buffer std_logic;
      spi0_sclk_i          : in     std_logic;
      spi0_sclk_o          : buffer std_logic;
      spi0_mosi_i          : in     std_logic;
      spi0_mosi_o_dly      : buffer std_logic;
      spi0_miso_i          : in     std_logic;
      spi0_ss_i            : in     std_logic;
      spi0_ss_o_dly        : buffer std_logic;
      spi_sclk             : in     std_logic;
      spi_mosi             : in     std_logic;
      spi_miso_dly         : buffer std_logic;
      spi_ss               : in     std_logic;
      adc_drdy_n_dly       : buffer std_logic;
      m00_axis_tvalid      : in     std_logic;
      m00_axis_tdata       : in     std_logic_vector(31 downto 0);
      m00_axis_tstrb       : in     std_logic_vector(3 downto 0);
      m00_axis_tlast       : in     std_logic;
      m00_axis_tready_dly  : buffer std_logic;
      sim_only_fifo_rden   : in     std_logic
      );
end adc_spi_axi_stream_vgen;

-------------------------------------------------------------------------------
architecture vgen of adc_spi_axi_stream_vgen is

   ---------------------------------------------------------------------------
   --                 CONSTANT, TYPE AND GENERIC DEFINITIONS                --
   ---------------------------------------------------------------------------
   ---------------------------------------------------------------------------
   --  The INP_DELAY constants correspond to tester timing groups. Edit to
   --  change INP_DELAY values from the examples below. Delete the unused
   --  INP_DELAY constants.
   ---------------------------------------------------------------------------

   constant inp_delay : time := 3.0 ns;

   constant main_clock_half_period : time := 10 ns;

   constant c_adc_read_word : std_logic_vector(255 downto 0) := x"ae0123456789abcdef0123456789abcdae0123456789abcdef0123456789abcd";

   ---------------------------------------------------------------------------
   --                          SIGNAL DECLARATIONS                          --
   ---------------------------------------------------------------------------
   signal reset            : std_logic;
   signal m00_axis_aresetn : std_logic;
   signal stream_go        : std_logic;
   signal spi0_mosi_o      : std_logic;
   signal spi0_ss_o        : std_logic;
   signal spi_miso         : std_logic;
   signal adc_drdy_n       : std_logic := '0';
   signal m00_axis_tready  : std_logic;

   signal adc_spi_cs_reg     : std_logic                      := '0';
   signal adc_spi_cs_d1      : std_logic                      := '0';
   signal adc_spi_cs_rising  : std_logic;
   signal adc_spi_cs_falling : std_logic;
   signal adc_spi_sclk_reg   : std_logic                      := '1';
   signal adc_spi_sclk_d1    : std_logic                      := '1';
   signal adc_spi_dout_reg   : std_logic                      := '0';
   signal adc_spi_rw_latch   : std_logic                      := '0';
   signal adc_rw_bit_latched : std_logic                      := '0';
   signal adc_spi_bit_cnt    : unsigned(7 downto 0)           := "00000000";
   signal adc_read_word      : std_logic_vector(255 downto 0) := c_adc_read_word;

   signal m00_axis_tvalid_reg : std_logic             := '0';
   signal axis_word_count     : unsigned(15 downto 0) := (others => '0');

   ---------------------------------------------------------------------------
   --                        COMPONENT DECLARATIONS                         --
   ---------------------------------------------------------------------------


begin
   ---------------------------------------------------------------------------
   --                    INSTANTIATE COMPONENTS                             --
   ---------------------------------------------------------------------------

   ---------------------------------------------------------------------------
   --                    CONCURRENT SIGNAL ASSIGNMENTS                      --
   ---------------------------------------------------------------------------
   ---------------------------------------------------------------------------
   --  Use the timing groups above to assign DUT input delays with respect to
   --  the clock. Use these to test for Setup/Hold timing violations.
   ---------------------------------------------------------------------------

   reset_dly            <= reset            after inp_delay;
   m00_axis_aresetn_dly <= m00_axis_aresetn after inp_delay;
   stream_go_dly        <= stream_go        after inp_delay;
   spi0_mosi_o_dly      <= spi0_mosi_o      after inp_delay;
   spi0_ss_o_dly        <= spi0_ss_o        after inp_delay;
   spi_miso_dly         <= spi_miso         after inp_delay;
   adc_drdy_n_dly       <= adc_drdy_n       after inp_delay;
   m00_axis_tready_dly  <= m00_axis_tready  after inp_delay;

   adc_spi_cs_rising  <= adc_spi_cs_reg and not(adc_spi_cs_d1);
   adc_spi_cs_falling <= not(adc_spi_cs_reg) and adc_spi_cs_d1;

   spi0_sclk_o <= '1';
   spi0_ss_o   <= '1';

   ---------------------------------------------------------------------------
   --                         CONCURRENT PROCESSES                          --
   ---------------------------------------------------------------------------


   ---------------------------------------------------------------------------
   --  Process:       MAIN_CLOCK_GEN 
   --  Timing Domain: MAIN
   --  Purpose:       Generates Clock Waveform.
   --  Outputs:       CLK 
   --  (The following is used by av-testbench for signals in the vpat file.)
   --  Signals in this time domain:
   --       spi0_sclk_i
   --       spi0_mosi_i
   --       spi0_miso_i
   --       spi0_ss_i
   --       spi_sclk
   --       spi_mosi
   --       spi_ss
   --       m00_axis_tvalid
   --       m00_axis_tdata
   --       m00_axis_tstrb
   --       m00_axis_tlast
   ---------------------------------------------------------------------------
   main_clock_gen : process
   begin
      clk <= '0';
      --  Wait for the initial start up time. 
      --  (You can edit the times below; Constants maybe used.)
      wait for main_clock_half_period;

      endless : loop
         clk <= '1';
         wait for main_clock_half_period;
         clk <= '0';
         wait for main_clock_half_period;
      end loop;

   end process main_clock_gen;


   -- ADC read process
   -- models the read request response from the ADCs
   adc_read_proc : process(clk)
   begin
      if rising_edge(clk) then

         -- register the spi inputs from the host
         adc_spi_cs_reg   <= spi_ss;
         adc_spi_cs_d1    <= adc_spi_cs_reg;
         adc_spi_sclk_reg <= spi_sclk;
         adc_spi_sclk_d1  <= adc_spi_sclk_reg;
         adc_spi_dout_reg <= spi_mosi;

         -- reset the bit count on a falling edge of chip select
         if ((adc_spi_cs_reg = '0') and (adc_spi_cs_d1 = '1')) then
            adc_spi_bit_cnt <= "00000000";
            adc_read_word   <= c_adc_read_word;
         end if;

         -- decode the R/W bit from the first bit of the transaction
         if (adc_spi_cs_reg = '0') then
            -- detect falling edge on the SPI clock
            if (((adc_spi_sclk_reg = '0') and (adc_spi_sclk_d1 = '1')) and (adc_rw_bit_latched = '0')) then
               adc_spi_rw_latch   <= adc_spi_dout_reg;
               adc_rw_bit_latched <= '1';
            end if;
         end if;

         -- reset the R/W bit and bit latched on the rising edge of the chip select
         if ((adc_spi_cs_reg = '1') and (adc_spi_cs_d1 = '0')) then
            adc_spi_rw_latch   <= '0';
            adc_rw_bit_latched <= '0';
         end if;


         -- detect the rising edge of the SPI clock
         if (adc_spi_cs_reg = '0') and ((spi_sclk = '1') and (adc_spi_sclk_reg = '0') and (adc_spi_rw_latch = '1')) then
            adc_spi_bit_cnt <= adc_spi_bit_cnt + 1;
            -- shift out ADC read data
            if (adc_spi_bit_cnt > 6) then
               spi_miso                    <= adc_read_word(255);
               adc_read_word(255 downto 1) <= adc_read_word(254 downto 0);
            end if;
         end if;

         -- simulate the ADC DRDY_N signal
         -- de-assert DRDY_N on the falling edge of the ADC SPI chip-select
         -- signal and re-assert on the rising edge
         if ((adc_spi_cs_reg = '0') and (adc_spi_cs_d1 = '1')) then
            adc_drdy_n <= '1';
         elsif ((adc_spi_cs_reg = '1') and (adc_spi_cs_d1 = '0')) then
            adc_drdy_n <= '0';
         else
            adc_drdy_n <= adc_drdy_n;
         end if;
         
      end if;  -- if rising_edge(clk)
   end process adc_read_proc;

   -- AXI4-Stream TREADY process
   axi_tready_proc : process (clk)
   begin
      if rising_edge(clk) then
         m00_axis_tvalid_reg <= m00_axis_tvalid;
         if (m00_axis_tvalid = '1') then
            m00_axis_tready <= '1';
         else
            m00_axis_tready <= '0';
         end if;

         if ((m00_axis_tvalid = '1') and (m00_axis_tvalid_reg = '0')) then
            axis_word_count <= (others => '0');
         elsif (sim_only_fifo_rden = '1') then
            axis_word_count <= axis_word_count + 1;
         end if;
      end if;  -- if rising_edge(clk)
   end process axi_tready_proc;


   ---------------------------------------------------------------------------
   --  Process:  DRIVER
   --  Purpose:  To drive the output signals of the vector generator.
   --  Inputs:   Feedback from the DUT.
   --  Outputs:  Inputs to DUT.
   ---------------------------------------------------------------------------


   driver : process

   begin
      -----------------------------------------------------------------------
      --  Put your test vectors here!
      -----------------------------------------------------------------------
      wait until (clk'event and clk = '1');
      reset            <= '0';
      m00_axis_aresetn <= '0';
      stream_go        <= '0';
      spi0_mosi_o      <= '0';

      for i in 1 to 10 loop
         wait until (clk'event and clk = '1');
      end loop;
      stream_go        <= '1';
      m00_axis_aresetn <= '1';

--      for i in 1 to 40 loop
--         wait until (clk'event and clk = '1');
--      end loop;
--      wait until ((clk'event and clk = '1') and (adc_spi_cs_rising = '1'));
--      for i in 1 to 10 loop
--         wait until (clk'event and clk = '1');
--      end loop;
--      wait until (clk'event and clk = '1');
--      stream_go <= '0';

      endless : loop
         wait until (clk'event and clk = '1');
      end loop;


   end process driver;

end vgen;
